# 第一部分：vim
## 一、vim的基本介绍
* vi编辑器是所有Unix及Linux系统下标准的编辑器，他就相当于windows系统中的记事本一样，方便代码的编辑和一些其他的文件的书写，很方便。
vim 具有程序编辑的能力，可以以字体颜色辨别语法的正确性，方便程序设计；
***
## 二、vim的基本模式选择和操作
* 此前在使用vim的时候，了解vim的基本模式有三种，分别提供给我们**打开关闭、保存退出**；**书写校验**；以及**复制删除**等等的操作。
***
* 基本的模式之间的转化规则（俨然就是一些在vim的命令模式下的选择结果，从一个状态转化到另外一个状态的方式，就是一些键盘的快捷键转化，这人里省略）。
***
* vim基本文件操作
	*  ***vim /path/to/somefile*** ：vim后跟文件路径及文件名 ，如果文件存在，则打开编辑文件窗口，如果文件不存在，则创建文件. 
	* ***vim + # /path/to/somefile***：打开文件，并定位到第#行，#代表数字,这个操作方便我们在一直文件架构的情况之下完成一些基本的寻找工作。
	* ***vim +***：打开文件，定位到最后一行```# vim + /etc/inittab```  
　　* ***vim +/PATTERN***：打开文件，定位到第一次被PATTERN匹配到的行的行首```# vim +/start/myfile``` ,我们称之为文件内容的查找匹配。
***
* 关闭文件
	* 末行模式下：
	```
　　　w：保存
　　　q：退出
　　　wq 或 x：保存退出，wq 和 x 都是保存退出
　　　q！：强制退出
　　　w！：强制保存，管理员才有权限
   ```
	* 命令模式下：
	```
　　　ZZ：保存并退出
   ```
***
* 光标的移动
	* 实际上光标的移动可以不依赖于当前的vim的命令模式的指令，因为即使是在命令模式之下，我们依然可以用键盘的上下左右移动，不过长久使用vim可以酌情使用命令完成。

```
	  ①逐字符移动
　　　　　h：向左
　　　　　l：向右
　　　　　j：向下
　　　　　k：向上
　　　　　#h：移动#个字符
　　　②以单词为单位移动
　　　　　w：移到下一个单词的词首
　　　　　e：跳至当前或下一个单词的词尾
　　　　　b：跳至当前或上一个单词的词首
　　　　　#w：表示移动#个单词
　　　③行内跳转
　　　　　0：绝对行首
　　　　　^：行首第一个非空白字符
　　　　　$：绝对行尾
　　　④行间跳转
　　　　　#G：跳转到第#行
　　　　　G：最后一行
```
***
* 粘贴命令
```
p(小写p)：如果删除的或复制的为整行内容，则粘贴到光标所在行的下方，如果复制或删除的内容为非整行，则粘贴至光标所在字符的后面
P(大写P)：如果删除的或复制的为整行内容，则粘贴到光标所在行的上方，如果复制或删除的内容为非整行，则粘贴至光标所在字符的前面
```
***
* 复制命令

```
命令模式
　　　　yy：复制当前行
　　　　yw （y#w,ye,y#e,yb,y#b）：复制光标当前位置到下个单词词首内容.#代表数字
　　　　y#G：复制当前位置当#行处的所有内容

末行模式
　　　　StartADD，EndADDy：复制StartADD到EndADDd位置的所有行，例如：10，15d：复制10到15行所有内容
　　　　+3y：复制当前位置向下3行
```
***
* vim打开多个文件
>在之前打开路径的基础上面提供多个文件的ID就可以了。

```
末行模式下
　　:next 切换到下一个文件
　　:prev 切换到上一个文件
　　:last 切换到最后一个文件
　　:first 切换到第一个文件
退出多个文件
　　qa：全部退出
```
***
* 一些其他的保存等等的win系统的基本文件操作在vim:

```
	末行模式下
    	w：表示保存当前文件
    	w /path/to/somewhere：将当前文件另存为到路径指定的地方
    	ADDR1,ADDR2w /path/to/somewhere：将ADDR1到ADDR2指定的地址文本 另存为到路径指定的地方

	末行模式下
   		r： /path/to/somefile
		例如：vim /etc/rc.sysinit 打开文件后，末行模式 输入 :r /etc/inittab ：会将 inittab文件的所有内容附加到rc.sysinit文件光标所在的位置

	跟shell交互（vim 末行模式执行shell）
	末行模式
		! command即可
		例如： ! ls /etc/：会列出/ect目录下所有文件及目录 按enter后回到vim编辑状态
```
***
* 设置喜好

```
在末行模式下
①显示或取消行号
        set nu（set number）：显示行号
        set nonu：取消显示行号
②显示忽略或区分字符大小写
        set ic （set ignorecase）：忽略大小写
        set noignorecase：区分大小写
③设定自动缩进
       set ai（set autoindent）：自动缩进
        set noai：取消自动缩进
④查找到的文本高亮或取消高亮显示
    set hlsearch：高亮显示搜索到的文本
    set nohlsearch：取消高亮显示搜索到的文本
⑤语法高亮
    syntax on：打开语法高亮显示
    syntax off：关闭语法高亮显示
```
***

## 三、学习vim的心得
vim在功能上面非常强大，这也就是为什么大多数的大牛喜欢使用vim的原因，vim把一切的设计工作全部集成到了一块儿，实现了
真正的一体化，命令很多，配合到linux的终端使用，将会是我们的编辑代码的重要工具，
还有待加强。

# 第二部分：ant

## 打开ant
首先我们打开**ant**文件内夹的时候，也就是我们的云桌面放置的那个文件夹的时候，我们ls一下，可以看到它的目录结构：
```
bin
etc
lib
manual
...
```
还有有一些其他的文件，都是已经下载好了的东西（如果没有安装，需要在自己的电脑上面安装一下）。
* 文件夹的作用：
>这里我主要说明下前四个文件夹的作用
	* bin 是 ant 的程序运行入口，如果没有配置 ANT_HOME 的情况下，可以通过 bin 目录中的 bat 程序进行运行 build 任务。如：在 cmd 中运行 ant.bat 就可以执行程序，当然你选择要当前目录中存在一个 build.xml （build.xml是默认的ant执行文件，当然你可以指定其他文件）
	* etc 目录中存放的都是一些xsl的输出模板，创建一个加强的导出各种任务的 XML 输出，使你的 build 文件摆脱过时的警告
	* lib 目录中存放的是 ant 程序需要依赖的 jar 包
	* manual 目录是 ant 程序的帮助文档
